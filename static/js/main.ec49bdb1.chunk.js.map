{"version":3,"sources":["components/ReturnsTable/ReturnsTable.jsx","components/ReturnsSlider/ReturnsSlider.jsx","App.js","serviceWorker.js","index.js"],"names":["ReturnsTable","props","className","class","scope","resultData","map","record","index","key","year","totalReturn","total","cumulative","i","Number","toFixed","calcCumulative","ReturnsSlider","Range","createSliderWithTooltip","Slider","defaultValue","startYear","endYear","min","max","latestYear","tipFormatter","val","onAfterChange","onChangeSlider","ariaValueTextFormatterGroupForHandles","App","useState","setStartYear","returns","setEndYear","values","concat","sort","a","b","filter","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAsCeA,G,MAnCM,SAACC,GAUpB,OACE,yBAAKC,UAAU,mBACb,2BAAOC,MAAM,qBACX,+BACE,4BACE,wBAAIC,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,OAAV,uBAGJ,+BACGH,EAAMI,WAAWC,KAAI,SAACC,EAAQC,GAC7B,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAOG,MACZ,4BAAKH,EAAOI,aACZ,4BAzBS,SAACH,GAGtB,IAFA,IAAII,EAAQ,EACVC,EAAa,EACNC,EAAI,EAAGA,GAAKN,EAAOM,IAE1BD,GADAD,GAAgBG,OAAOd,EAAMI,WAAWS,GAAGH,cACxBK,QAAQ,GAE7B,OAAOH,EAkBUI,CAAeT,a,OCFrBU,G,YAtBO,SAACjB,GACrB,IACMkB,GAAQC,EADkBC,IAAOD,yBACDC,IAAOF,OAE7C,OACE,yBAAKjB,UAAU,kBACb,yBAAKA,UAAU,oBACb,kBAACiB,EAAD,CACEG,aAAc,CAACrB,EAAMsB,UAAWtB,EAAMuB,SACtCC,IAAK,KACLC,IAAKzB,EAAM0B,WACXC,aAAc,SAACC,GAAD,OAASA,GACvBC,cAAe7B,EAAM8B,eACrBC,sCAAuC,CACrC,SAACH,GAAD,8BAA0BA,IAC1B,SAACA,GAAD,4BAAwBA,WCkBrBI,MAjCf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACNX,EADM,KACKY,EADL,OAEuBD,mBAASE,GAFhC,mBAEN/B,EAFM,KAGPsB,GAHO,KAGMtB,EAAW,GAAGK,MAHpB,EAIiBwB,mBAASP,GAJ1B,mBAINH,EAJM,KAIGa,EAJH,KAqBb,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,CACEyB,WAAYA,EACZJ,UAAWA,EACXC,QAASA,EACTO,eArBiB,SAACO,GACtBH,EAAaG,EAAO,IACpBD,EAAWC,EAAO,OAqBhB,kBAAC,EAAD,CAAcjC,WAjBC,GAAGkC,OAAOlC,GAAYmC,MAAK,SAACC,EAAGC,GAC9C,OAAOD,EAAE/B,KAAOgC,EAAEhC,QAEUiC,QAAO,SAACC,GACpC,OAAOA,EAAKlC,MAAQa,GAAaqB,EAAKlC,MAAQc,SCThCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ec49bdb1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ReturnsTable.scss\";\n\nconst ReturnsTable = (props) => {\n  const calcCumulative = (index) => {\n    let total = 0,\n      cumulative = 0;\n    for (let i = 0; i <= index; i++) {\n      total = total + Number(props.resultData[i].totalReturn);\n      cumulative = total.toFixed(2);\n    }\n    return cumulative;\n  };\n  return (\n    <div className=\"table-container\">\n      <table class=\"table table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Year</th>\n            <th scope=\"col\">Total Return</th>\n            <th scope=\"col\">Cumulative Return</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.resultData.map((record, index) => {\n            return (\n              <tr key={index}>\n                <td>{record.year}</td>\n                <td>{record.totalReturn}</td>\n                <td>{calcCumulative(index)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default ReturnsTable;\n","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport \"./ReturnsSlider.scss\";\nimport \"rc-slider/assets/index.css\";\n\nconst ReturnsSlider = (props) => {\n  const createSliderWithTooltip = Slider.createSliderWithTooltip;\n  const Range = createSliderWithTooltip(Slider.Range);\n\n  return (\n    <div className=\"slider-wrapper\">\n      <div className=\"slider-container\">\n        <Range\n          defaultValue={[props.startYear, props.endYear]}\n          min={1926}\n          max={props.latestYear}\n          tipFormatter={(val) => val}\n          onAfterChange={props.onChangeSlider}\n          ariaValueTextFormatterGroupForHandles={[\n            (val) => `Starting year ${val}`,\n            (val) => `Ending year ${val}`,\n          ]}\n        />\n      </div>\n    </div>\n  );\n};\nexport default ReturnsSlider;\n","import React, { useState } from \"react\";\nimport returns from \"./data/total_returns.json\";\nimport ReturnsTable from \"./components/ReturnsTable/ReturnsTable\";\nimport ReturnsSlider from \"./components/ReturnsSlider/ReturnsSlider\";\n\nfunction App() {\n  const [startYear, setStartYear] = useState(1926);\n  const [resultData, setResultData] = useState(returns);\n  const latestYear = resultData[0].year;\n  const [endYear, setEndYear] = useState(latestYear);\n\n  const onChangeSlider = (values) => {\n    setStartYear(values[0]);\n    setEndYear(values[1]);\n  };\n\n  const getData = () => {\n    let sortedData = [].concat(resultData).sort((a, b) => {\n      return a.year - b.year;\n    });\n    let filteredData = sortedData.filter((data) => {\n      return data.year >= startYear && data.year <= endYear;\n    });\n    return filteredData;\n  };\n\n  return (\n    <div className=\"App\">\n      <ReturnsSlider\n        latestYear={latestYear}\n        startYear={startYear}\n        endYear={endYear}\n        onChangeSlider={onChangeSlider}\n      />\n      <ReturnsTable resultData={getData()} />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}